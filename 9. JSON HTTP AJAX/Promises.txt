A promise is an object that may produce a single value some time in the future.Either a resolved or rejected with a reason that is not resolved(rejected)
Promise States: Fulfilled, Rejected, Pending


Promise

const promise = new Promise((resolve,reject) => {
	if(true){
		resolve('Stuff worked')
	}
	else{
		reject('Error, it broke')
	}
	
})


const promise2 = new Promise((resolve,reject) => {
 setTimeout(resolve,100,"HEYYYYYYYY!!!")
})

const promise3 = new Promise((resolve,reject) => {
 setTimeout(resolve,1000,"STOPPPPP!!!")
})

const promise4 = new Promise((resolve,reject) => {
 setTimeout(resolve,3000,"YOU ARE DISRUPTING THE TIMELLINE FLASH!!!")
})

const promise5 = new Promise((resolve,reject) => {
 setTimeout(resolve,5000,"I AM TELLING YOU WILL REGRET IT! PLEASE STOP RIGHT NOW BARRY!")
})


Promise.all([promise2,promise3,promise4,promise5])
.then(values => {
	console.log(values);
})

promise
.then(result => result + "  YAAAAAAAAAAAAAAYYYY!")
.then(result2 => {
	throw Error
	console.log(result2);
})
.catch( () => console.log('Error!'))



const urls = [
	'https://jsonplaceholder.typicode.com/users',
	'https://jsonplaceholder.typicode.com/posts',
	'https://jsonplaceholder.typicode.com/albums',
]


Promise.all(urls.map(url =>{
	return fetch(url).then(resp=> resp.json())
})).then(results =>{
	console.log(results[0])
	console.log(results[1])
	console.log(results[2])
}).catch(() => console.log('Error'))